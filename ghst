--[[
    ghst.lol | Da Hood
    A comprehensive GUI script with camlock, movement, ESP, and other features
]]

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

-- Variables
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera

-- Configuration
local Config = {
    -- GUI
    UIName = "ghst.lol | Da Hood",
    UISize = UDim2.new(0, 550, 0, 450), -- Increased vertical size
    UIPosition = UDim2.new(0.5, -275, 0.5, -225),
    UITheme = {
        Background = Color3.fromRGB(20, 20, 20),
        TopBar = Color3.fromRGB(30, 30, 30),
        Section = Color3.fromRGB(30, 30, 30),
        Text = Color3.fromRGB(255, 255, 255),
        Border = Color3.fromRGB(40, 40, 40),
        Accent = Color3.fromRGB(0, 120, 255),
        AccentDark = Color3.fromRGB(0, 80, 170),
    },
    
    -- Camlock
    Camlock = {
        Enabled = false,
        Key = Enum.KeyCode.C,
        Target = nil,
        TargetPart = "Head",
        Smoothness = 0.9,
        Prediction = 0.9,
        FOV = 250,
        ShowFOV = true,
        FOVColor = Color3.fromRGB(0, 120, 255),
    },
    
    -- Strafe
    Strafe = {
        Enabled = false,
        Target = nil,
        Method = "Orbit",
        Speed = 200,
        Distance = 12,
        MaxDistance = 30,
    },
    
    -- Movement
    Movement = {
        Flying = false,
        FlySpeed = 100,
        Speed = 200,
        SpeedEnabled = false,
    },
    
    -- Target Feature
    Target = {
        HideDisplayName = true,
    },
    
    -- Kill Aura
    KillAura = {
        Enabled = false,
        IgnoreKnocked = true,
        Range = 10,
    },
    
    -- Hit Features
    HitFeatures = {
        EnableSound = true,
        EnableEffects = true,
        HitSound = "Bubble",
    },
    
    -- Neck Grabs
    NeckGrabs = {
        Enabled = false,
    },
    
    -- Silent Aim
    SilentAim = {
        Enabled = false,
        IgnoreKnocked = true,
        LockNearest = false,
        FOV = 100,
        FOVVisible = true,
        FOVColor = Color3.fromRGB(0, 120, 255),
    },
    
    -- Desync
    Desync = {
        Enabled = false,
        Visualize = false,
        Method = "Normal",
    },
    
    -- ESP
    ESP = {
        Enabled = false,
        BoxESP = false,
        NameESP = false,
        HealthESP = false,
        TracerESP = false,
        BoxColor = Color3.fromRGB(0, 120, 255),
        NameColor = Color3.fromRGB(255, 255, 255),
        HealthColor = Color3.fromRGB(0, 255, 0),
        TracerColor = Color3.fromRGB(0, 120, 255),
    },
}

-- Drawing objects
local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = false
FOVCircle.Transparency = 0.5
FOVCircle.Thickness = 1
FOVCircle.Color = Config.Camlock.FOVColor
FOVCircle.NumSides = 64
FOVCircle.Radius = Config.Camlock.FOV
FOVCircle.Filled = false

local SilentAimFOV = Drawing.new("Circle")
SilentAimFOV.Visible = false
SilentAimFOV.Transparency = 0.5
SilentAimFOV.Thickness = 1
SilentAimFOV.Color = Config.SilentAim.FOVColor
SilentAimFOV.NumSides = 64
SilentAimFOV.Radius = Config.SilentAim.FOV
SilentAimFOV.Filled = false

-- UI Elements
local GUI = {}

-- Utility functions
local Utility = {}

-- Get the closest player to the local player
function Utility.GetClosestPlayer()
    local ClosestPlayer = nil
    local ClosestDistance = math.huge
    
    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and Player.Character:FindFirstChild("Humanoid") and Player.Character.Humanoid.Health > 0 then
            local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - Player.Character.HumanoidRootPart.Position).Magnitude
            
            if Distance < ClosestDistance then
                ClosestPlayer = Player
                ClosestDistance = Distance
            end
        end
    end
    
    return ClosestPlayer
end

-- Get the closest player to the mouse
function Utility.GetClosestPlayerToMouse()
    local ClosestPlayer = nil
    local ClosestDistance = math.huge
    
    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and Player.Character:FindFirstChild("Humanoid") and Player.Character.Humanoid.Health > 0 then
            local ScreenPoint = Camera:WorldToScreenPoint(Player.Character.HumanoidRootPart.Position)
            local Distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude
            
            if Distance < ClosestDistance and Distance <= Config.Camlock.FOV then
                ClosestPlayer = Player
                ClosestDistance = Distance
            end
        end
    end
    
    return ClosestPlayer
end

-- Check if a player is knocked
function Utility.IsPlayerKnocked(Player)
    if Player and Player.Character and Player.Character:FindFirstChild("Humanoid") then
        return Player.Character.Humanoid:GetState() == Enum.HumanoidStateType.Physics
    end
    return false
end

-- Create the user interface
function GUI.Create()
    -- Remove existing GUI if it exists
    if CoreGui:FindFirstChild(Config.UIName) then
        CoreGui:FindFirstChild(Config.UIName):Destroy()
    end
    
    -- Create main frame
    local MainGUI = Instance.new("ScreenGui")
    MainGUI.Name = Config.UIName
    MainGUI.Parent = CoreGui
    MainGUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = Config.UISize
    MainFrame.Position = Config.UIPosition
    MainFrame.BackgroundColor3 = Config.UITheme.Background
    MainFrame.BorderSizePixel = 0
    MainFrame.Active = true
    MainFrame.Draggable = true
    MainFrame.Parent = MainGUI
    
    -- Create top bar
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Size = UDim2.new(1, 0, 0, 30)
    TopBar.Position = UDim2.new(0, 0, 0, 0)
    TopBar.BackgroundColor3 = Config.UITheme.TopBar
    TopBar.BorderSizePixel = 0
    TopBar.Parent = MainFrame
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "Title"
    TitleLabel.Size = UDim2.new(1, 0, 1, 0)
    TitleLabel.Position = UDim2.new(0, 0, 0, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = Config.UIName
    TitleLabel.TextColor3 = Config.UITheme.Text
    TitleLabel.TextSize = 16
    TitleLabel.Font = Enum.Font.SourceSansBold
    TitleLabel.Parent = TopBar
    
    -- Create tab buttons
    local TabsFrame = Instance.new("Frame")
    TabsFrame.Name = "Tabs"
    TabsFrame.Size = UDim2.new(1, 0, 0, 30)
    TabsFrame.Position = UDim2.new(0, 0, 0, 30)
    TabsFrame.BackgroundColor3 = Config.UITheme.TopBar
    TabsFrame.BorderSizePixel = 0
    TabsFrame.Parent = MainFrame
    
    local TabButtonLayout = Instance.new("UIListLayout")
    TabButtonLayout.FillDirection = Enum.FillDirection.Horizontal
    TabButtonLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabButtonLayout.Padding = UDim.new(0, 0)
    TabButtonLayout.Parent = TabsFrame
    
    -- Create content frame
    local ContentFrame = Instance.new("Frame")
    ContentFrame.Name = "Content"
    ContentFrame.Size = UDim2.new(1, 0, 1, -60)
    ContentFrame.Position = UDim2.new(0, 0, 0, 60)
    ContentFrame.BackgroundColor3 = Config.UITheme.Background
    ContentFrame.BorderSizePixel = 0
    ContentFrame.Parent = MainFrame
    
    -- Create tab function
    local Tabs = {}
    local SelectedTab = nil
    
    local function CreateTab(Name)
        -- Tab Button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = Name.."Tab"
        TabButton.Size = UDim2.new(0, 120, 1, 0) -- Wider tabs
        TabButton.BackgroundColor3 = Config.UITheme.TopBar
        TabButton.BorderSizePixel = 0
        TabButton.Text = Name
        TabButton.TextColor3 = Config.UITheme.Text
        TabButton.TextSize = 14
        TabButton.Font = Enum.Font.SourceSans
        TabButton.Parent = TabsFrame
        
        -- Tab Content
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Name = Name.."Content"
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.BackgroundTransparency = 1
        TabContent.BorderSizePixel = 0
        TabContent.ScrollBarThickness = 4
        TabContent.Visible = false
        TabContent.Parent = ContentFrame
        
        local ContentLayout = Instance.new("UIListLayout")
        ContentLayout.FillDirection = Enum.FillDirection.Horizontal
        ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ContentLayout.Padding = UDim.new(0, 10)
        ContentLayout.Parent = TabContent
        
        ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.CanvasSize = UDim2.new(0, ContentLayout.AbsoluteContentSize.X, 0, 0)
        end)
        
        TabButton.MouseButton1Click:Connect(function()
            if SelectedTab then
                ContentFrame:FindFirstChild(SelectedTab.."Content").Visible = false
            end
            
            TabContent.Visible = true
            SelectedTab = Name
        end)
        
        Tabs[Name] = {
            Button = TabButton,
            Content = TabContent
        }
        
        return TabContent
    end
    
    -- Create sections
    local function CreateSection(Parent, Title, Size)
        local Section = Instance.new("Frame")
        Section.Name = Title.."Section"
        Section.Size = Size or UDim2.new(0, 280, 1, -10) -- Wider sections for better content fit
        Section.BackgroundColor3 = Config.UITheme.Section
        Section.BorderSizePixel = 0
        Section.Parent = Parent
        
        local SectionTitle = Instance.new("TextLabel")
        SectionTitle.Name = "Title"
        SectionTitle.Size = UDim2.new(1, 0, 0, 30)
        SectionTitle.Position = UDim2.new(0, 0, 0, 0)
        SectionTitle.BackgroundColor3 = Config.UITheme.Accent
        SectionTitle.BorderSizePixel = 0
        SectionTitle.Text = Title
        SectionTitle.TextColor3 = Config.UITheme.Text
        SectionTitle.TextSize = 14
        SectionTitle.Font = Enum.Font.SourceSansBold
        SectionTitle.Parent = Section
        
        local SectionContent = Instance.new("Frame")
        SectionContent.Name = "Content"
        SectionContent.Size = UDim2.new(1, 0, 1, -30)
        SectionContent.Position = UDim2.new(0, 0, 0, 30)
        SectionContent.BackgroundTransparency = 1
        SectionContent.Parent = Section
        
        local ContentLayout = Instance.new("UIListLayout")
        ContentLayout.FillDirection = Enum.FillDirection.Vertical
        ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ContentLayout.Padding = UDim.new(0, 5)
        ContentLayout.Parent = SectionContent
        
        -- Add padding
        local Padding = Instance.new("UIPadding")
        Padding.PaddingLeft = UDim.new(0, 10)
        Padding.PaddingRight = UDim.new(0, 10)
        Padding.PaddingTop = UDim.new(0, 5)
        Padding.PaddingBottom = UDim.new(0, 5)
        Padding.Parent = SectionContent
        
        return SectionContent
    end
    
    -- Create toggle
    local function CreateToggle(Parent, Text, Default, Callback)
        local ToggleFrame = Instance.new("Frame")
        ToggleFrame.Name = Text.."Toggle"
        ToggleFrame.Size = UDim2.new(1, 0, 0, 20)
        ToggleFrame.BackgroundTransparency = 1
        ToggleFrame.Parent = Parent
        
        local ToggleButton = Instance.new("TextButton")
        ToggleButton.Name = "Button"
        ToggleButton.Size = UDim2.new(0, 20, 0, 20)
        ToggleButton.Position = UDim2.new(0, 0, 0, 0)
        ToggleButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        ToggleButton.BorderSizePixel = 0
        ToggleButton.Text = ""
        ToggleButton.Parent = ToggleFrame
        
        local ToggleLabel = Instance.new("TextLabel")
        ToggleLabel.Name = "Label"
        ToggleLabel.Size = UDim2.new(1, -30, 1, 0)
        ToggleLabel.Position = UDim2.new(0, 30, 0, 0)
        ToggleLabel.BackgroundTransparency = 1
        ToggleLabel.Text = Text
        ToggleLabel.TextColor3 = Config.UITheme.Text
        ToggleLabel.TextSize = 14
        ToggleLabel.Font = Enum.Font.SourceSans
        ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
        ToggleLabel.Parent = ToggleFrame
        
        local Toggle = {
            Value = Default or false
        }
        
        function Toggle.Set(Value)
            Toggle.Value = Value
            ToggleButton.BackgroundColor3 = Toggle.Value and Config.UITheme.Accent or Color3.fromRGB(40, 40, 40)
            
            if Callback then
                Callback(Toggle.Value)
            end
        end
        
        ToggleButton.MouseButton1Click:Connect(function()
            Toggle.Set(not Toggle.Value)
        end)
        
        Toggle.Set(Toggle.Value)
        
        return Toggle
    end
    
    -- Create slider
    local function CreateSlider(Parent, Text, Min, Max, Default, Decimals, Callback)
        local SliderFrame = Instance.new("Frame")
        SliderFrame.Name = Text.."Slider"
        SliderFrame.Size = UDim2.new(1, 0, 0, 40)
        SliderFrame.BackgroundTransparency = 1
        SliderFrame.Parent = Parent
        
        local SliderLabel = Instance.new("TextLabel")
        SliderLabel.Name = "Label"
        SliderLabel.Size = UDim2.new(1, 0, 0, 20)
        SliderLabel.Position = UDim2.new(0, 0, 0, 0)
        SliderLabel.BackgroundTransparency = 1
        SliderLabel.Text = Text
        SliderLabel.TextColor3 = Config.UITheme.Text
        SliderLabel.TextSize = 14
        SliderLabel.Font = Enum.Font.SourceSans
        SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
        SliderLabel.Parent = SliderFrame
        
        local SliderValue = Instance.new("TextLabel")
        SliderValue.Name = "Value"
        SliderValue.Size = UDim2.new(0, 40, 0, 20)
        SliderValue.Position = UDim2.new(1, -40, 0, 0)
        SliderValue.BackgroundTransparency = 1
        SliderValue.Text = tostring(Default or Min)
        SliderValue.TextColor3 = Config.UITheme.Text
        SliderValue.TextSize = 14
        SliderValue.Font = Enum.Font.SourceSans
        SliderValue.TextXAlignment = Enum.TextXAlignment.Right
        SliderValue.Parent = SliderFrame
        
        local SliderBackground = Instance.new("Frame")
        SliderBackground.Name = "Background"
        SliderBackground.Size = UDim2.new(1, 0, 0, 10)
        SliderBackground.Position = UDim2.new(0, 0, 0, 25)
        SliderBackground.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        SliderBackground.BorderSizePixel = 0
        SliderBackground.Parent = SliderFrame
        
        local SliderFill = Instance.new("Frame")
        SliderFill.Name = "Fill"
        SliderFill.Size = UDim2.new(0, 0, 1, 0)
        SliderFill.BackgroundColor3 = Config.UITheme.Accent
        SliderFill.BorderSizePixel = 0
        SliderFill.Parent = SliderBackground
        
        local SliderButton = Instance.new("TextButton")
        SliderButton.Name = "Button"
        SliderButton.Size = UDim2.new(1, 0, 1, 0)
        SliderButton.BackgroundTransparency = 1
        SliderButton.Text = ""
        SliderButton.Parent = SliderBackground
        
        local Slider = {
            Value = Default or Min,
            Min = Min,
            Max = Max,
            Decimals = Decimals or 1
        }
        
        function Slider.Set(Value)
            Value = math.clamp(Value, Slider.Min, Slider.Max)
            
            if Slider.Decimals then
                Value = math.floor(Value * 10^Slider.Decimals) / 10^Slider.Decimals
            else
                Value = math.floor(Value)
            end
            
            Slider.Value = Value
            
            local Percent = (Slider.Value - Slider.Min) / (Slider.Max - Slider.Min)
            SliderFill.Size = UDim2.new(Percent, 0, 1, 0)
            SliderValue.Text = tostring(Slider.Value)
            
            if Callback then
                Callback(Slider.Value)
            end
        end
        
        SliderButton.MouseButton1Down:Connect(function()
            local Connection
            
            Connection = RunService.RenderStepped:Connect(function()
                if not UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                    Connection:Disconnect()
                    return
                end
                
                local MousePercent = math.clamp((Mouse.X - SliderBackground.AbsolutePosition.X) / SliderBackground.AbsoluteSize.X, 0, 1)
                local Value = Slider.Min + (Slider.Max - Slider.Min) * MousePercent
                
                Slider.Set(Value)
            end)
        end)
        
        Slider.Set(Slider.Value)
        
        return Slider
    end
    
    -- Create dropdown
    local function CreateDropdown(Parent, Text, Options, Default, Callback)
        local DropdownFrame = Instance.new("Frame")
        DropdownFrame.Name = Text.."Dropdown"
        DropdownFrame.Size = UDim2.new(1, 0, 0, 40)
        DropdownFrame.BackgroundTransparency = 1
        DropdownFrame.Parent = Parent
        
        local DropdownLabel = Instance.new("TextLabel")
        DropdownLabel.Name = "Label"
        DropdownLabel.Size = UDim2.new(1, 0, 0, 20)
        DropdownLabel.Position = UDim2.new(0, 0, 0, 0)
        DropdownLabel.BackgroundTransparency = 1
        DropdownLabel.Text = Text
        DropdownLabel.TextColor3 = Config.UITheme.Text
        DropdownLabel.TextSize = 14
        DropdownLabel.Font = Enum.Font.SourceSans
        DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
        DropdownLabel.Parent = DropdownFrame
        
        local DropdownButton = Instance.new("TextButton")
        DropdownButton.Name = "Button"
        DropdownButton.Size = UDim2.new(1, 0, 0, 20)
        DropdownButton.Position = UDim2.new(0, 0, 0, 20)
        DropdownButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        DropdownButton.BorderSizePixel = 0
        DropdownButton.Text = Default or ""
        DropdownButton.TextColor3 = Config.UITheme.Text
        DropdownButton.TextSize = 14
        DropdownButton.Font = Enum.Font.SourceSans
        DropdownButton.TextXAlignment = Enum.TextXAlignment.Center
        DropdownButton.Parent = DropdownFrame
        
        local DropdownList = Instance.new("Frame")
        DropdownList.Name = "List"
        DropdownList.Size = UDim2.new(1, 0, 0, 0)
        DropdownList.Position = UDim2.new(0, 0, 0, 40)
        DropdownList.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        DropdownList.BorderSizePixel = 0
        DropdownList.Visible = false
        DropdownList.ZIndex = 10
        DropdownList.Parent = DropdownFrame
        
        local ListLayout = Instance.new("UIListLayout")
        ListLayout.FillDirection = Enum.FillDirection.Vertical
        ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ListLayout.Padding = UDim.new(0, 0)
        ListLayout.Parent = DropdownList
        
        local Dropdown = {
            Value = Default or "",
            Options = Options,
            Open = false
        }
        
        function Dropdown.Set(Value)
            if table.find(Dropdown.Options, Value) then
                Dropdown.Value = Value
                DropdownButton.Text = Dropdown.Value
                
                if Callback then
                    Callback(Dropdown.Value)
                end
            end
        end
        
        function Dropdown.Toggle()
            Dropdown.Open = not Dropdown.Open
            DropdownList.Visible = Dropdown.Open
            
            if Dropdown.Open then
                DropdownList.Size = UDim2.new(1, 0, 0, #Dropdown.Options * 20)
            else
                DropdownList.Size = UDim2.new(1, 0, 0, 0)
            end
        end
        
        -- Create option buttons
        for i, Option in pairs(Dropdown.Options) do
            local OptionButton = Instance.new("TextButton")
            OptionButton.Name = Option.."Option"
            OptionButton.Size = UDim2.new(1, 0, 0, 20)
            OptionButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            OptionButton.BorderSizePixel = 0
            OptionButton.Text = Option
            OptionButton.TextColor3 = Config.UITheme.Text
            OptionButton.TextSize = 14
            OptionButton.Font = Enum.Font.SourceSans
            OptionButton.TextXAlignment = Enum.TextXAlignment.Center
            OptionButton.ZIndex = 11
            OptionButton.Parent = DropdownList
            
            OptionButton.MouseButton1Click:Connect(function()
                Dropdown.Set(Option)
                Dropdown.Toggle()
            end)
        end
        
        DropdownButton.MouseButton1Click:Connect(function()
            Dropdown.Toggle()
        end)
        
        Dropdown.Set(Dropdown.Value)
        
        return Dropdown
    end
    
    -- Create button
    local function CreateButton(Parent, Text, Callback)
        local ButtonFrame = Instance.new("Frame")
        ButtonFrame.Name = Text.."Button"
        ButtonFrame.Size = UDim2.new(1, 0, 0, 25)
        ButtonFrame.BackgroundTransparency = 1
        ButtonFrame.Parent = Parent
        
        local Button = Instance.new("TextButton")
        Button.Name = "Button"
        Button.Size = UDim2.new(1, 0, 1, 0)
        Button.BackgroundColor3 = Config.UITheme.Accent
        Button.BorderSizePixel = 0
        Button.Text = Text
        Button.TextColor3 = Config.UITheme.Text
        Button.TextSize = 14
        Button.Font = Enum.Font.SourceSans
        Button.Parent = ButtonFrame
        
        Button.MouseButton1Click:Connect(function()
            if Callback then
                Callback()
            end
        end)
        
        return Button
    end
    
    -- Create keybind
    local function CreateKeybind(Parent, Text, Default, Callback)
        local KeybindFrame = Instance.new("Frame")
        KeybindFrame.Name = Text.."Keybind"
        KeybindFrame.Size = UDim2.new(1, 0, 0, 20)
        KeybindFrame.BackgroundTransparency = 1
        KeybindFrame.Parent = Parent
        
        local KeybindLabel = Instance.new("TextLabel")
        KeybindLabel.Name = "Label"
        KeybindLabel.Size = UDim2.new(0, 60, 1, 0)
        KeybindLabel.Position = UDim2.new(0, 0, 0, 0)
        KeybindLabel.BackgroundTransparency = 1
        KeybindLabel.Text = Text
        KeybindLabel.TextColor3 = Config.UITheme.Text
        KeybindLabel.TextSize = 14
        KeybindLabel.Font = Enum.Font.SourceSans
        KeybindLabel.TextXAlignment = Enum.TextXAlignment.Left
        KeybindLabel.Parent = KeybindFrame
        
        local KeybindButton = Instance.new("TextButton")
        KeybindButton.Name = "Button"
        KeybindButton.Size = UDim2.new(0, 30, 1, 0)
        KeybindButton.Position = UDim2.new(1, -30, 0, 0)
        KeybindButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        KeybindButton.BorderSizePixel = 0
        KeybindButton.Text = Default and Default.Name or "..."
        KeybindButton.TextColor3 = Config.UITheme.Text
        KeybindButton.TextSize = 14
        KeybindButton.Font = Enum.Font.SourceSans
        KeybindButton.Parent = KeybindFrame
        
        local Keybind = {
            Value = Default,
            Binding = false
        }
        
        function Keybind.Set(Value)
            Keybind.Value = Value
            KeybindButton.Text = Keybind.Value and Keybind.Value.Name or "..."
            
            if Callback then
                Callback(Keybind.Value)
            end
        end
        
        KeybindButton.MouseButton1Click:Connect(function()
            Keybind.Binding = true
            KeybindButton.Text = "..."
        end)
        
        UserInputService.InputBegan:Connect(function(Input)
            if Keybind.Binding and Input.UserInputType == Enum.UserInputType.Keyboard then
                Keybind.Set(Input.KeyCode)
                Keybind.Binding = false
            end
        end)
        
        Keybind.Set(Keybind.Value)
        
        return Keybind
    end
    
    -- Create color picker
    local function CreateColorPicker(Parent, Text, Default, Callback)
        local ColorPickerFrame = Instance.new("Frame")
        ColorPickerFrame.Name = Text.."ColorPicker"
        ColorPickerFrame.Size = UDim2.new(1, 0, 0, 20)
        ColorPickerFrame.BackgroundTransparency = 1
        ColorPickerFrame.Parent = Parent
        
        local ColorPickerLabel = Instance.new("TextLabel")
        ColorPickerLabel.Name = "Label"
        ColorPickerLabel.Size = UDim2.new(1, -30, 1, 0)
        ColorPickerLabel.Position = UDim2.new(0, 0, 0, 0)
        ColorPickerLabel.BackgroundTransparency = 1
        ColorPickerLabel.Text = Text
        ColorPickerLabel.TextColor3 = Config.UITheme.Text
        ColorPickerLabel.TextSize = 14
        ColorPickerLabel.Font = Enum.Font.SourceSans
        ColorPickerLabel.TextXAlignment = Enum.TextXAlignment.Left
        ColorPickerLabel.Parent = ColorPickerFrame
        
        local ColorPickerButton = Instance.new("TextButton")
        ColorPickerButton.Name = "Button"
        ColorPickerButton.Size = UDim2.new(0, 20, 0, 20)
        ColorPickerButton.Position = UDim2.new(1, -20, 0, 0)
        ColorPickerButton.BackgroundColor3 = Default or Color3.fromRGB(255, 255, 255)
        ColorPickerButton.BorderSizePixel = 0
        ColorPickerButton.Text = ""
        ColorPickerButton.Parent = ColorPickerFrame
        
        local ColorPicker = {
            Value = Default or Color3.fromRGB(255, 255, 255),
            Open = false
        }
        
        -- Color picker popup
        local Popup = Instance.new("Frame")
        Popup.Name = "ColorPickerPopup"
        Popup.Size = UDim2.new(0, 200, 0, 220)
        Popup.Position = UDim2.new(1, 10, 0, 0)
        Popup.BackgroundColor3 = Config.UITheme.Section
        Popup.BorderSizePixel = 0
        Popup.Visible = false
        Popup.ZIndex = 100
        Popup.Parent = ColorPickerFrame
        
        local PopupTitle = Instance.new("TextLabel")
        PopupTitle.Name = "Title"
        PopupTitle.Size = UDim2.new(1, 0, 0, 30)
        PopupTitle.Position = UDim2.new(0, 0, 0, 0)
        PopupTitle.BackgroundColor3 = Config.UITheme.Accent
        PopupTitle.BorderSizePixel = 0
        PopupTitle.Text = "Color Picker"
        PopupTitle.TextColor3 = Config.UITheme.Text
        PopupTitle.TextSize = 14
        PopupTitle.Font = Enum.Font.SourceSansBold
        PopupTitle.ZIndex = 101
        PopupTitle.Parent = Popup
        
        -- Color display
        local ColorDisplay = Instance.new("Frame")
        ColorDisplay.Name = "ColorDisplay"
        ColorDisplay.Size = UDim2.new(0, 180, 0, 20)
        ColorDisplay.Position = UDim2.new(0.5, -90, 0, 40)
        ColorDisplay.BackgroundColor3 = ColorPicker.Value
        ColorDisplay.BorderSizePixel = 0
        ColorDisplay.ZIndex = 101
        ColorDisplay.Parent = Popup
        
        -- RGB inputs
        local RedLabel = Instance.new("TextLabel")
        RedLabel.Name = "RedLabel"
        RedLabel.Size = UDim2.new(0, 20, 0, 20)
        RedLabel.Position = UDim2.new(0, 10, 0, 70)
        RedLabel.BackgroundTransparency = 1
        RedLabel.Text = "R:"
        RedLabel.TextColor3 = Config.UITheme.Text
        RedLabel.TextSize = 14
        RedLabel.Font = Enum.Font.SourceSans
        RedLabel.ZIndex = 101
        RedLabel.Parent = Popup
        
        local RedInput = Instance.new("TextBox")
        RedInput.Name = "RedInput"
        RedInput.Size = UDim2.new(0, 40, 0, 20)
        RedInput.Position = UDim2.new(0, 30, 0, 70)
        RedInput.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        RedInput.BorderSizePixel = 0
        RedInput.Text = tostring(math.floor(ColorPicker.Value.R * 255))
        RedInput.TextColor3 = Config.UITheme.Text
        RedInput.TextSize = 14
        RedInput.Font = Enum.Font.SourceSans
        RedInput.ZIndex = 101
        RedInput.Parent = Popup
        
        local GreenLabel = Instance.new("TextLabel")
        GreenLabel.Name = "GreenLabel"
        GreenLabel.Size = UDim2.new(0, 20, 0, 20)
        GreenLabel.Position = UDim2.new(0, 80, 0, 70)
        GreenLabel.BackgroundTransparency = 1
        GreenLabel.Text = "G:"
        GreenLabel.TextColor3 = Config.UITheme.Text
        GreenLabel.TextSize = 14
        GreenLabel.Font = Enum.Font.SourceSans
        GreenLabel.ZIndex = 101
        GreenLabel.Parent = Popup
        
        local GreenInput = Instance.new("TextBox")
        GreenInput.Name = "GreenInput"
        GreenInput.Size = UDim2.new(0, 40, 0, 20)
        GreenInput.Position = UDim2.new(0, 100, 0, 70)
        GreenInput.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        GreenInput.BorderSizePixel = 0
        GreenInput.Text = tostring(math.floor(ColorPicker.Value.G * 255))
        GreenInput.TextColor3 = Config.UITheme.Text
        GreenInput.TextSize = 14
        GreenInput.Font = Enum.Font.SourceSans
        GreenInput.ZIndex = 101
        GreenInput.Parent = Popup
        
        local BlueLabel = Instance.new("TextLabel")
        BlueLabel.Name = "BlueLabel"
        BlueLabel.Size = UDim2.new(0, 20, 0, 20)
        BlueLabel.Position = UDim2.new(0, 150, 0, 70)
        BlueLabel.BackgroundTransparency = 1
        BlueLabel.Text = "B:"
        BlueLabel.TextColor3 = Config.UITheme.Text
        BlueLabel.TextSize = 14
        BlueLabel.Font = Enum.Font.SourceSans
        BlueLabel.ZIndex = 101
        BlueLabel.Parent = Popup
        
        local BlueInput = Instance.new("TextBox")
        BlueInput.Name = "BlueInput"
        BlueInput.Size = UDim2.new(0, 40, 0, 20)
        BlueInput.Position = UDim2.new(0, 170, 0, 70)
        BlueInput.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        BlueInput.BorderSizePixel = 0
        BlueInput.Text = tostring(math.floor(ColorPicker.Value.B * 255))
        BlueInput.TextColor3 = Config.UITheme.Text
        BlueInput.TextSize = 14
        BlueInput.Font = Enum.Font.SourceSans
        BlueInput.ZIndex = 101
        BlueInput.Parent = Popup
        
        -- Color wheel
        local ColorWheel = Instance.new("ImageLabel")
        ColorWheel.Name = "ColorWheel"
        ColorWheel.Size = UDim2.new(0, 150, 0, 150)
        ColorWheel.Position = UDim2.new(0.5, -75, 0, 100)
        ColorWheel.BackgroundTransparency = 1
        ColorWheel.Image = "rbxassetid://4155801252"
        ColorWheel.ZIndex = 101
        ColorWheel.Parent = Popup
        
        -- Apply button
        local ApplyButton = Instance.new("TextButton")
        ApplyButton.Name = "ApplyButton"
        ApplyButton.Size = UDim2.new(0, 80, 0, 25)
        ApplyButton.Position = UDim2.new(0.5, -40, 1, -30)
        ApplyButton.BackgroundColor3 = Config.UITheme.Accent
        ApplyButton.BorderSizePixel = 0
        ApplyButton.Text = "Apply"
        ApplyButton.TextColor3 = Config.UITheme.Text
        ApplyButton.TextSize = 14
        ApplyButton.Font = Enum.Font.SourceSans
        ApplyButton.ZIndex = 101
        ApplyButton.Parent = Popup
        
        function ColorPicker.Set(Value)
            ColorPicker.Value = Value
            ColorPickerButton.BackgroundColor3 = ColorPicker.Value
            ColorDisplay.BackgroundColor3 = ColorPicker.Value
            
            -- Update RGB inputs
            RedInput.Text = tostring(math.floor(ColorPicker.Value.R * 255))
            GreenInput.Text = tostring(math.floor(ColorPicker.Value.G * 255))
            BlueInput.Text = tostring(math.floor(ColorPicker.Value.B * 255))
            
            if Callback then
                Callback(ColorPicker.Value)
            end
        end
        
        function ColorPicker.Toggle()
            ColorPicker.Open = not ColorPicker.Open
            Popup.Visible = ColorPicker.Open
        end
        
        ColorPickerButton.MouseButton1Click:Connect(function()
            ColorPicker.Toggle()
        end)
        
        -- Apply RGB values
        local function ApplyRGB()
            local R = tonumber(RedInput.Text) or 0
            local G = tonumber(GreenInput.Text) or 0
            local B = tonumber(BlueInput.Text) or 0
            
            R = math.clamp(R, 0, 255) / 255
            G = math.clamp(G, 0, 255) / 255
            B = math.clamp(B, 0, 255) / 255
            
            ColorPicker.Set(Color3.fromRGB(R * 255, G * 255, B * 255))
        end
        
        RedInput.FocusLost:Connect(function()
            ApplyRGB()
        end)
        
        GreenInput.FocusLost:Connect(function()
            ApplyRGB()
        end)
        
        BlueInput.FocusLost:Connect(function()
            ApplyRGB()
        end)
        
        -- Color wheel
        ColorWheel.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                local Connection
                
                Connection = RunService.RenderStepped:Connect(function()
                    if not UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                        Connection:Disconnect()
                        return
                    end
                    
                    local MousePos = UserInputService:GetMouseLocation() - Vector2.new(0, 36)
                    local Center = ColorWheel.AbsolutePosition + ColorWheel.AbsoluteSize / 2
                    local Dist = (MousePos - Center).Magnitude
                    local Direction = (MousePos - Center).Unit
                    
                    if Dist <= ColorWheel.AbsoluteSize.X / 2 then
                        local Hue = math.atan2(Direction.Y, Direction.X) + math.pi
                        local Saturation = Dist / (ColorWheel.AbsoluteSize.X / 2)
                        
                        local Color = Color3.fromHSV(Hue / (math.pi * 2), Saturation, 1)
                        ColorPicker.Set(Color)
                    end
                end)
            end
        end)
        
        -- Apply button
        ApplyButton.MouseButton1Click:Connect(function()
            ColorPicker.Toggle()
        end)
        
        ColorPicker.Set(ColorPicker.Value)
        
        return ColorPicker
    end
    
    -- Create tabs
    local MainTab = CreateTab("Main")
    local LegitTab = CreateTab("Legit")
    local MovementTab = CreateTab("Movement")
    local VisualsTab = CreateTab("Visuals")
    local MiscTab = CreateTab("Misc")
    local UISettingsTab = CreateTab("UI Settings")
    
    -- Main Tab
    local CamlockSection = CreateSection(MainTab, "Camlock")
    
    local CamlockToggle = CreateToggle(CamlockSection, "Camlock Toggle", Config.Camlock.Enabled, function(Value)
        Config.Camlock.Enabled = Value
    end)
    
    local CamlockKeybind = CreateKeybind(CamlockSection, "Keybind", Config.Camlock.Key, function(Value)
        Config.Camlock.Key = Value
    end)
    
    local CamlockSmoothness = CreateSlider(CamlockSection, "Smoothness", 0.5, 1, Config.Camlock.Smoothness, 2, function(Value)
        Config.Camlock.Smoothness = Value
    end)
    
    local CamlockPrediction = CreateSlider(CamlockSection, "Prediction", 0.9, 20, Config.Camlock.Prediction, 2, function(Value)
        Config.Camlock.Prediction = Value
    end)
    
    local CamlockPartDropdown = CreateDropdown(CamlockSection, "Hit Part", {"Head", "UpperTorso", "LowerTorso", "RightArm", "LeftArm", "RightLeg", "LeftLeg"}, Config.Camlock.TargetPart, function(Value)
        Config.Camlock.TargetPart = Value
    end)
    
    local StrafeSection = CreateSection(MainTab, "Strafe")
    
    local StrafeToggle = CreateToggle(StrafeSection, "Enabled [Q]", Config.Strafe.Enabled, function(Value)
        Config.Strafe.Enabled = Value
    end)
    
    local StrafeMethodDropdown = CreateDropdown(StrafeSection, "Select Method", {"Orbit", "Spin", "Random"}, Config.Strafe.Method, function(Value)
        Config.Strafe.Method = Value
    end)
    
    local StrafeSpeedSlider = CreateSlider(StrafeSection, "Strafe Speed", 50, 1000, Config.Strafe.Speed, 0, function(Value)
        Config.Strafe.Speed = Value
    end)
    
    local OrbitDistanceSlider = CreateSlider(StrafeSection, "Orbit Distance", 5, 30, Config.Strafe.Distance, 0, function(Value)
        Config.Strafe.Distance = Value
    end)
    
    local TargetFeatureSection = CreateSection(MainTab, "Target Feature")
    
    local TargetUserLabel = Instance.new("TextLabel")
    TargetUserLabel.Name = "TargetUserLabel"
    TargetUserLabel.Size = UDim2.new(1, 0, 0, 20)
    TargetUserLabel.BackgroundTransparency = 1
    TargetUserLabel.Text = "Target User [Not Display Name]"
    TargetUserLabel.TextColor3 = Config.UITheme.Text
    TargetUserLabel.TextSize = 14
    TargetUserLabel.Font = Enum.Font.SourceSans
    TargetUserLabel.TextXAlignment = Enum.TextXAlignment.Left
    TargetUserLabel.Parent = TargetFeatureSection
    
    local TargetLabel = Instance.new("TextLabel")
    TargetLabel.Name = "TargetLabel"
    TargetLabel.Size = UDim2.new(1, 0, 0, 20)
    TargetLabel.BackgroundTransparency = 1
    TargetLabel.Text = "Target:"
    TargetLabel.TextColor3 = Config.UITheme.Text
    TargetLabel.TextSize = 14
    TargetLabel.Font = Enum.Font.SourceSans
    TargetLabel.TextXAlignment = Enum.TextXAlignment.Left
    TargetLabel.Parent = TargetFeatureSection
    
    local GotoButton = CreateButton(TargetFeatureSection, "Goto", function()
        if Config.Camlock.Target and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = Config.Camlock.Target.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 3)
        end
    end)
    
    local ViewToggle = CreateToggle(TargetFeatureSection, "View", false, function(Value)
        if Value then
            if Config.Camlock.Target then
                Camera.CameraSubject = Config.Camlock.Target.Character.Humanoid
            end
        else
            Camera.CameraSubject = LocalPlayer.Character.Humanoid
        end
    end)
    
    local SelectGunDropdown = CreateDropdown(TargetFeatureSection, "Select Gun", {"Rifle", "SMG", "Pistol", "Shotgun"}, "Rifle", function(Value)
        -- Gun selection
    end)
    
    -- Legit Tab
    local LegitCamlockSection = CreateSection(LegitTab, "Camlock")
    
    local LegitCamlockToggle = CreateToggle(LegitCamlockSection, "Camlock Toggle", Config.Camlock.Enabled, function(Value)
        Config.Camlock.Enabled = Value
    end)
    
    local LegitCamlockKeybind = CreateKeybind(LegitCamlockSection, "Keybind", Config.Camlock.Key, function(Value)
        Config.Camlock.Key = Value
    end)
    
    local LegitCamlockSmoothness = CreateSlider(LegitCamlockSection, "Smoothness", 0.5, 1, Config.Camlock.Smoothness, 2, function(Value)
        Config.Camlock.Smoothness = Value
    end)
    
    local LegitCamlockPrediction = CreateSlider(LegitCamlockSection, "Prediction", 0.9, 20, Config.Camlock.Prediction, 2, function(Value)
        Config.Camlock.Prediction = Value
    end)
    
    local LegitCamlockPartDropdown = CreateDropdown(LegitCamlockSection, "Hit Part", {"Head", "UpperTorso", "LowerTorso", "RightArm", "LeftArm", "RightLeg", "LeftLeg"}, Config.Camlock.TargetPart, function(Value)
        Config.Camlock.TargetPart = Value
    end)
    
    -- Kill Aura Section
    local KillAuraSection = CreateSection(LegitTab, "Kill Aura")
    
    local KillAuraToggle = CreateToggle(KillAuraSection, "Kill Aura", Config.KillAura.Enabled, function(Value)
        Config.KillAura.Enabled = Value
    end)
    
    local IgnoreKnockedPlayersToggle = CreateToggle(KillAuraSection, "Ignore Knocked Players", Config.KillAura.IgnoreKnocked, function(Value)
        Config.KillAura.IgnoreKnocked = Value
    end)
    
    local KillAuraRangeSlider = CreateSlider(KillAuraSection, "Kill Aura Range", 1, 250, Config.KillAura.Range, 0, function(Value)
        Config.KillAura.Range = Value
    end)
    
    -- Hit Features Section
    local HitFeaturesSection = CreateSection(LegitTab, "For Hit Thing")
    
    local EnableHitSoundToggle = CreateToggle(HitFeaturesSection, "Enable Hit Sound", Config.HitFeatures.EnableSound, function(Value)
        Config.HitFeatures.EnableSound = Value
    end)
    
    local EnableHitEffectsToggle = CreateToggle(HitFeaturesSection, "Enable Hit Effects", Config.HitFeatures.EnableEffects, function(Value)
        Config.HitFeatures.EnableEffects = Value
    end)
    
    local HitSoundDropdown = CreateDropdown(HitFeaturesSection, "Hitsound", {"Bubble", "Click", "Knock", "Pop"}, Config.HitFeatures.HitSound, function(Value)
        Config.HitFeatures.HitSound = Value
    end)
    
    -- Neck Grabs Section
    local NeckGrabsSection = CreateSection(LegitTab, "Neck Grabs")
    
    local NeckGrabsToggle = CreateToggle(NeckGrabsSection, "Neck Grabs", Config.NeckGrabs.Enabled, function(Value)
        Config.NeckGrabs.Enabled = Value
    end)
    
    -- Silent Aim Section
    local SilentAimSection = CreateSection(LegitTab, "Silent Aim")
    
    local SilentAimToggle = CreateToggle(SilentAimSection, "Silent Aim", Config.SilentAim.Enabled, function(Value)
        Config.SilentAim.Enabled = Value
    end)
    
    local IgnoreKnockedPlayerToggle = CreateToggle(SilentAimSection, "Ignore Knocked Player", Config.SilentAim.IgnoreKnocked, function(Value)
        Config.SilentAim.IgnoreKnocked = Value
    end)
    
    local LockNearestToggle = CreateToggle(SilentAimSection, "Lock Nearest", Config.SilentAim.LockNearest, function(Value)
        Config.SilentAim.LockNearest = Value
    end)
    
    local FOVSlider = CreateSlider(SilentAimSection, "FOV", 10, 500, Config.SilentAim.FOV, 0, function(Value)
        Config.SilentAim.FOV = Value
        SilentAimFOV.Radius = Value
    end)
    
    -- Desync Section
    local DesyncSection = CreateSection(LegitTab, "Desync")
    
    local DesyncToggle = CreateToggle(DesyncSection, "Desync", Config.Desync.Enabled, function(Value)
        Config.Desync.Enabled = Value
    end)
    
    local VisualizeToggle = CreateToggle(DesyncSection, "Visualize", Config.Desync.Visualize, function(Value)
        Config.Desync.Visualize = Value
    end)
    
    local MethodDropdown = CreateDropdown(DesyncSection, "Method", {"Normal", "Underscore", "Predict"}, Config.Desync.Method, function(Value)
        Config.Desync.Method = Value
    end)
    
    -- Movement Tab
    local MovementSection = CreateSection(MovementTab, "Movement")
    
    local FlyToggle = CreateToggle(MovementSection, "Fly", Config.Movement.Flying, function(Value)
        Config.Movement.Flying = Value
    end)
    
    local FlySpeedSlider = CreateSlider(MovementSection, "Fly Speed", 10, 500, Config.Movement.FlySpeed, 0, function(Value)
        Config.Movement.FlySpeed = Value
    end)
    
    local SpeedToggle = CreateToggle(MovementSection, "Speed", Config.Movement.SpeedEnabled, function(Value)
        Config.Movement.SpeedEnabled = Value
    end)
    
    local SpeedSlider = CreateSlider(MovementSection, "Speed", 16, 1000, Config.Movement.Speed, 0, function(Value)
        Config.Movement.Speed = Value
    end)
    
    -- Visuals Tab
    local ESPSection = CreateSection(VisualsTab, "ESP")
    
    local ESPToggle = CreateToggle(ESPSection, "Enable ESP", Config.ESP.Enabled, function(Value)
        Config.ESP.Enabled = Value
    end)
    
    local BoxESPToggle = CreateToggle(ESPSection, "Box ESP", Config.ESP.BoxESP, function(Value)
        Config.ESP.BoxESP = Value
    end)
    
    local NameESPToggle = CreateToggle(ESPSection, "Name ESP", Config.ESP.NameESP, function(Value)
        Config.ESP.NameESP = Value
    end)
    
    local HealthESPToggle = CreateToggle(ESPSection, "Health ESP", Config.ESP.HealthESP, function(Value)
        Config.ESP.HealthESP = Value
    end)
    
    local TracerESPToggle = CreateToggle(ESPSection, "Tracer ESP", Config.ESP.TracerESP, function(Value)
        Config.ESP.TracerESP = Value
    end)
    
    local BoxColorPicker = CreateColorPicker(ESPSection, "Box Color", Config.ESP.BoxColor, function(Value)
        Config.ESP.BoxColor = Value
    end)
    
    local NameColorPicker = CreateColorPicker(ESPSection, "Name Color", Config.ESP.NameColor, function(Value)
        Config.ESP.NameColor = Value
    end)
    
    local HealthColorPicker = CreateColorPicker(ESPSection, "Health Color", Config.ESP.HealthColor, function(Value)
        Config.ESP.HealthColor = Value
    end)
    
    local TracerColorPicker = CreateColorPicker(ESPSection, "Tracer Color", Config.ESP.TracerColor, function(Value)
        Config.ESP.TracerColor = Value
    end)
    
    -- UI Settings Tab
    local UISettingsSection = CreateSection(UISettingsTab, "UI Settings")
    
    local BackgroundColorPicker = CreateColorPicker(UISettingsSection, "Background Color", Config.UITheme.Background, function(Value)
        Config.UITheme.Background = Value
        MainFrame.BackgroundColor3 = Value
        ContentFrame.BackgroundColor3 = Value
    end)
    
    local TopBarColorPicker = CreateColorPicker(UISettingsSection, "Top Bar Color", Config.UITheme.TopBar, function(Value)
        Config.UITheme.TopBar = Value
        TopBar.BackgroundColor3 = Value
        TabsFrame.BackgroundColor3 = Value
        
        for _, Tab in pairs(Tabs) do
            Tab.Button.BackgroundColor3 = Value
        end
    end)
    
    local SectionColorPicker = CreateColorPicker(UISettingsSection, "Section Color", Config.UITheme.Section, function(Value)
        Config.UITheme.Section = Value
        
        for _, TabContent in pairs(ContentFrame:GetChildren()) do
            if TabContent:IsA("ScrollingFrame") then
                for _, Section in pairs(TabContent:GetChildren()) do
                    if Section:IsA("Frame") then
                        Section.BackgroundColor3 = Value
                    end
                end
            end
        end
    end)
    
    local TextColorPicker = CreateColorPicker(UISettingsSection, "Text Color", Config.UITheme.Text, function(Value)
        Config.UITheme.Text = Value
        TitleLabel.TextColor3 = Value
        
        -- Update all text colors
        for _, TabContent in pairs(ContentFrame:GetChildren()) do
            if TabContent:IsA("ScrollingFrame") then
                for _, Section in pairs(TabContent:GetChildren()) do
                    if Section:IsA("Frame") then
                        for _, Component in pairs(Section:GetDescendants()) do
                            if Component:IsA("TextLabel") or Component:IsA("TextButton") then
                                Component.TextColor3 = Value
                            end
                        end
                    end
                end
            end
        end
        
        for _, Tab in pairs(Tabs) do
            Tab.Button.TextColor3 = Value
        end
    end)
    
    local AccentColorPicker = CreateColorPicker(UISettingsSection, "Accent Color", Config.UITheme.Accent, function(Value)
        Config.UITheme.Accent = Value
        Config.UITheme.AccentDark = Color3.fromRGB(
            math.clamp(Value.R * 255 - 40, 0, 255),
            math.clamp(Value.G * 255 - 40, 0, 255),
            math.clamp(Value.B * 255 - 40, 0, 255)
        )
        
        -- Update accent colors
        for _, TabContent in pairs(ContentFrame:GetChildren()) do
            if TabContent:IsA("ScrollingFrame") then
                for _, Section in pairs(TabContent:GetChildren()) do
                    if Section:IsA("Frame") and Section:FindFirstChild("Title") then
                        Section.Title.BackgroundColor3 = Value
                    end
                end
            end
        end
        
        -- Update other accent colored elements
        for _, TabContent in pairs(ContentFrame:GetChildren()) do
            if TabContent:IsA("ScrollingFrame") then
                for _, Section in pairs(TabContent:GetChildren()) do
                    if Section:IsA("Frame") then
                        for _, Component in pairs(Section:GetDescendants()) do
                            if Component:IsA("Frame") and Component.Name == "Fill" then
                                Component.BackgroundColor3 = Value
                            elseif Component:IsA("TextButton") and Component.Parent.Name:match("Button") then
                                Component.BackgroundColor3 = Value
                            end
                        end
                    end
                end
            end
        end
        
        -- Update FOV Circles
        FOVCircle.Color = Value
        SilentAimFOV.Color = Value
    end)
    
    -- Set default tab
    Tabs["Main"].Button.MouseButton1Click:Fire()
end

-- Update FOV circles
RunService.RenderStepped:Connect(function()
    if Config.Camlock.ShowFOV then
        FOVCircle.Visible = true
        FOVCircle.Position = Vector2.new(Mouse.X, Mouse.Y + 36)
        FOVCircle.Radius = Config.Camlock.FOV
        FOVCircle.Color = Config.Camlock.FOVColor
    else
        FOVCircle.Visible = false
    end
    
    if Config.SilentAim.FOVVisible then
        SilentAimFOV.Visible = true
        SilentAimFOV.Position = Vector2.new(Mouse.X, Mouse.Y + 36)
        SilentAimFOV.Radius = Config.SilentAim.FOV
        SilentAimFOV.Color = Config.SilentAim.FOVColor
    else
        SilentAimFOV.Visible = false
    end
end)

-- Camlock functionality (toggle mode)
local CamlockActive = false -- Toggle state for camlock

UserInputService.InputBegan:Connect(function(Input, GameProcessed)
    if not GameProcessed and Input.KeyCode == Config.Camlock.Key then
        CamlockActive = not CamlockActive -- Toggle the state
        
        if CamlockActive then
            -- Activate camlock
            local Target = Utility.GetClosestPlayerToMouse()
            if Target then
                Config.Camlock.Target = Target
            end
        else
            -- Deactivate camlock
            Config.Camlock.Target = nil
        end
    end
end)

-- Add continuous target acquisition when camlock is active
RunService.Heartbeat:Connect(function()
    if CamlockActive and (Config.Camlock.Target == nil or not Config.Camlock.Target.Character or not Config.Camlock.Target.Character:FindFirstChild(Config.Camlock.TargetPart)) then
        -- Try to find a new target if current one is invalid
        local Target = Utility.GetClosestPlayerToMouse()
        if Target then
            Config.Camlock.Target = Target
        end
    end
end)

-- Camlock update function
RunService.RenderStepped:Connect(function()
    -- Only apply camlock when both feature is enabled in settings AND toggle is active
    if Config.Camlock.Enabled and CamlockActive and Config.Camlock.Target and Config.Camlock.Target.Character and Config.Camlock.Target.Character:FindFirstChild(Config.Camlock.TargetPart) and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local TargetPart = Config.Camlock.Target.Character:FindFirstChild(Config.Camlock.TargetPart)
        local TargetPosition = TargetPart.Position
        local TargetVelocity = TargetPart.Velocity
        
        TargetPosition = TargetPosition + (TargetVelocity * Config.Camlock.Prediction)
        
        local CameraPosition = Camera.CFrame.Position
        local CameraLookVector = (TargetPosition - CameraPosition).Unit
        
        local TargetCFrame = CFrame.new(CameraPosition, CameraPosition + CameraLookVector)
        Camera.CFrame = Camera.CFrame:Lerp(TargetCFrame, Config.Camlock.Smoothness)
    end
end)

-- Strafe feature
local StrafeConnection = nil
UserInputService.InputBegan:Connect(function(Input, GameProcessed)
    if not GameProcessed and Input.KeyCode == Enum.KeyCode.Q then
        Config.Strafe.Enabled = not Config.Strafe.Enabled
        
        if Config.Strafe.Enabled then
            Config.Strafe.Target = Utility.GetClosestPlayer()
            
            if StrafeConnection then
                StrafeConnection:Disconnect()
            end
            
            StrafeConnection = RunService.Heartbeat:Connect(function()
                if Config.Strafe.Enabled and Config.Strafe.Target and Config.Strafe.Target.Character and Config.Strafe.Target.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local TargetHRP = Config.Strafe.Target.Character.HumanoidRootPart
                    local LocalHRP = LocalPlayer.Character.HumanoidRootPart
                    
                    local TargetPosition = TargetHRP.Position
                    local TargetCFrame = TargetHRP.CFrame
                    
                    if Config.Strafe.Method == "Orbit" then
                        local Angle = tick() * (Config.Strafe.Speed / 100)
                        local Offset = Vector3.new(math.cos(Angle), 0, math.sin(Angle)) * Config.Strafe.Distance
                        local Position = TargetPosition + Offset
                        
                        LocalHRP.CFrame = CFrame.new(Position, TargetPosition)
                    elseif Config.Strafe.Method == "Spin" then
                        local Angle = tick() * (Config.Strafe.Speed / 100)
                        local Position = TargetPosition + Vector3.new(0, 0, Config.Strafe.Distance)
                        
                        LocalHRP.CFrame = CFrame.new(Position) * CFrame.Angles(0, Angle, 0)
                    elseif Config.Strafe.Method == "Random" then
                        local Time = tick() * (Config.Strafe.Speed / 200)
                        local OffsetX = math.sin(Time) * Config.Strafe.Distance
                        local OffsetZ = math.cos(Time * 1.5) * Config.Strafe.Distance
                        local Position = TargetPosition + Vector3.new(OffsetX, 0, OffsetZ)
                        
                        LocalHRP.CFrame = CFrame.new(Position, TargetPosition)
                    end
                end
            end)
        else
            if StrafeConnection then
                StrafeConnection:Disconnect()
                StrafeConnection = nil
            end
        end
    end
end)

-- ESP functionality
local ESPObjects = {}

local function CreateESP(Player)
    if Player == LocalPlayer then return end
    
    local ESP = {
        Box = Drawing.new("Square"),
        Name = Drawing.new("Text"),
        Health = Drawing.new("Line"),
        Tracer = Drawing.new("Line")
    }
    
    ESP.Box.Thickness = 1
    ESP.Box.Filled = false
    ESP.Box.Visible = false
    ESP.Box.Color = Config.ESP.BoxColor
    ESP.Box.Transparency = 1
    
    ESP.Name.Size = 14
    ESP.Name.Center = true
    ESP.Name.Outline = true
    ESP.Name.Visible = false
    ESP.Name.Color = Config.ESP.NameColor
    ESP.Name.Transparency = 1
    
    ESP.Health.Thickness = 2
    ESP.Health.Visible = false
    ESP.Health.Color = Config.ESP.HealthColor
    ESP.Health.Transparency = 1
    
    ESP.Tracer.Thickness = 1
    ESP.Tracer.Visible = false
    ESP.Tracer.Color = Config.ESP.TracerColor
    ESP.Tracer.Transparency = 1
    
    ESPObjects[Player] = ESP
end

local function UpdateESP()
    for Player, ESP in pairs(ESPObjects) do
        if not Player or not Player.Character or not Player.Character:FindFirstChild("HumanoidRootPart") or not Player.Character:FindFirstChild("Humanoid") or not Config.ESP.Enabled then
            ESP.Box.Visible = false
            ESP.Name.Visible = false
            ESP.Health.Visible = false
            ESP.Tracer.Visible = false
            continue
        end
        
        local Character = Player.Character
        local HRP = Character.HumanoidRootPart
        local Humanoid = Character.Humanoid
        
        local Vector, OnScreen = Camera:WorldToViewportPoint(HRP.Position)
        
        if not OnScreen then
            ESP.Box.Visible = false
            ESP.Name.Visible = false
            ESP.Health.Visible = false
            ESP.Tracer.Visible = false
            continue
        end
        
        local Size = (Camera:WorldToViewportPoint(HRP.Position + Vector3.new(0, 3, 0)).Y - Camera:WorldToViewportPoint(HRP.Position - Vector3.new(0, 3, 0)).Y) / 2
        local BoxSize = Vector2.new(Size * 1.5, Size * 3)
        local BoxPosition = Vector2.new(Vector.X - Size * 1.5 / 2, Vector.Y - Size * 3 / 2)
        
        -- Update box
        ESP.Box.Size = BoxSize
        ESP.Box.Position = BoxPosition
        ESP.Box.Visible = Config.ESP.BoxESP
        ESP.Box.Color = Config.ESP.BoxColor
        
        -- Update name
        ESP.Name.Text = Player.Name
        ESP.Name.Position = Vector2.new(Vector.X, Vector.Y - Size * 3 / 2 - 15)
        ESP.Name.Visible = Config.ESP.NameESP
        ESP.Name.Color = Config.ESP.NameColor
        
        -- Update health
        local Health = Humanoid.Health
        local MaxHealth = Humanoid.MaxHealth
        local HealthPercent = (Health / MaxHealth)
        
        ESP.Health.From = Vector2.new(BoxPosition.X - 5, BoxPosition.Y)
        ESP.Health.To = Vector2.new(BoxPosition.X - 5, BoxPosition.Y + (BoxSize.Y * HealthPercent))
        ESP.Health.Color = Color3.fromRGB(255 - 255 * HealthPercent, 255 * HealthPercent, 0)
        ESP.Health.Visible = Config.ESP.HealthESP
        
        -- Update tracer
        ESP.Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
        ESP.Tracer.To = Vector2.new(Vector.X, Vector.Y)
        ESP.Tracer.Visible = Config.ESP.TracerESP
        ESP.Tracer.Color = Config.ESP.TracerColor
    end
end

-- Create ESP for existing players
for _, Player in pairs(Players:GetPlayers()) do
    if Player ~= LocalPlayer then
        CreateESP(Player)
    end
end

-- Create ESP for new players
Players.PlayerAdded:Connect(function(Player)
    CreateESP(Player)
end)

-- Remove ESP for players who leave
Players.PlayerRemoving:Connect(function(Player)
    if ESPObjects[Player] then
        for _, Object in pairs(ESPObjects[Player]) do
            Object:Remove()
        end
        
        ESPObjects[Player] = nil
    end
end)

-- Update ESP
RunService.RenderStepped:Connect(UpdateESP)

-- Flying functionality
local FlySpeed = Config.Movement.FlySpeed
local Flying = false

local function ActivateFly()
    if Flying then return end
    
    Flying = true
    Config.Movement.Flying = true
    
    local Character = LocalPlayer.Character
    local Humanoid = Character:FindFirstChild("Humanoid")
    local HRP = Character:FindFirstChild("HumanoidRootPart")
    
    local BodyVelocity = Instance.new("BodyVelocity")
    BodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    BodyVelocity.Velocity = Vector3.new(0, 0, 0)
    BodyVelocity.Name = "FlyVelocity"
    BodyVelocity.Parent = HRP
    
    local BodyGyro = Instance.new("BodyGyro")
    BodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
    BodyGyro.CFrame = HRP.CFrame
    BodyGyro.Name = "FlyGyro"
    BodyGyro.Parent = HRP
    
    Humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    
    local Connection = RunService.RenderStepped:Connect(function()
        if not Flying then
            Connection:Disconnect()
            return
        end
        
        FlySpeed = Config.Movement.FlySpeed
        
        local Camera = workspace.CurrentCamera
        local LookVector = Camera.CFrame.LookVector
        local UpVector = Camera.CFrame.UpVector
        
        local MoveDirection = Vector3.new(0, 0, 0)
        
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            MoveDirection = MoveDirection + LookVector
        end
        
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            MoveDirection = MoveDirection - LookVector
        end
        
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            MoveDirection = MoveDirection - Camera.CFrame.RightVector
        end
        
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            MoveDirection = MoveDirection + Camera.CFrame.RightVector
        end
        
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            MoveDirection = MoveDirection + UpVector
        end
        
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
            MoveDirection = MoveDirection - UpVector
        end
        
        BodyVelocity.Velocity = MoveDirection.Unit * FlySpeed
        BodyGyro.CFrame = Camera.CFrame
    end)
end

local function DeactivateFly()
    if not Flying then return end
    
    Flying = false
    Config.Movement.Flying = false
    
    local Character = LocalPlayer.Character
    local Humanoid = Character:FindFirstChild("Humanoid")
    local HRP = Character:FindFirstChild("HumanoidRootPart")
    
    if HRP:FindFirstChild("FlyVelocity") then
        HRP.FlyVelocity:Destroy()
    end
    
    if HRP:FindFirstChild("FlyGyro") then
        HRP.FlyGyro:Destroy()
    end
    
    Humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
end

-- Speed functionality
local SpeedConnection = nil

local function EnableSpeed()
    if SpeedConnection then
        SpeedConnection:Disconnect()
    end
    
    SpeedConnection = RunService.RenderStepped:Connect(function()
        if Config.Movement.SpeedEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = Config.Movement.Speed
        end
    end)
end

local function DisableSpeed()
    if SpeedConnection then
        SpeedConnection:Disconnect()
        SpeedConnection = nil
    end
    
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.WalkSpeed = 16
    end
end

-- Create the GUI
GUI.Create()

-- Main loop
RunService.RenderStepped:Connect(function()
    -- Update flying
    if Config.Movement.Flying and not Flying then
        ActivateFly()
    elseif not Config.Movement.Flying and Flying then
        DeactivateFly()
    end
    
    -- Update speed
    if Config.Movement.SpeedEnabled and not SpeedConnection then
        EnableSpeed()
    elseif not Config.Movement.SpeedEnabled and SpeedConnection then
        DisableSpeed()
    end
    
    -- Update target display
    local TargetFeatureSection = CoreGui:FindFirstChild(Config.UIName).MainFrame.Content.MainContent:FindFirstChild("Target FeatureSection")
    if TargetFeatureSection and TargetFeatureSection.Content:FindFirstChild("TargetLabel") then
        TargetFeatureSection.Content.TargetLabel.Text = "Target: " .. (Config.Camlock.Target and Config.Camlock.Target.Name or "None")
    end
end)

-- Notification
local function CreateNotification(Title, Text, Duration)
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "Notification"
    ScreenGui.Parent = CoreGui
    
    local NotificationFrame = Instance.new("Frame")
    NotificationFrame.Name = "NotificationFrame"
    NotificationFrame.Size = UDim2.new(0, 250, 0, 70)
    NotificationFrame.Position = UDim2.new(1, -270, 1, -90)
    NotificationFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    NotificationFrame.BorderSizePixel = 0
    NotificationFrame.Parent = ScreenGui
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "Title"
    TitleLabel.Size = UDim2.new(1, 0, 0, 30)
    TitleLabel.BackgroundColor3 = Config.UITheme.Accent
    TitleLabel.BorderSizePixel = 0
    TitleLabel.Text = Title
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.TextSize = 16
    TitleLabel.Font = Enum.Font.SourceSansBold
    TitleLabel.Parent = NotificationFrame
    
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = "Text"
    TextLabel.Size = UDim2.new(1, 0, 1, -30)
    TextLabel.Position = UDim2.new(0, 0, 0, 30)
    TextLabel.BackgroundTransparency = 1
    TextLabel.Text = Text
    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.TextSize = 14
    TextLabel.Font = Enum.Font.SourceSans
    TextLabel.Parent = NotificationFrame
    
    local OriginalPosition = NotificationFrame.Position
    NotificationFrame.Position = UDim2.new(1, 0, 1, -90)
    
    local TweenIn = TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = OriginalPosition})
    TweenIn:Play()
    
    task.delay(Duration or 5, function()
        local TweenOut = TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = UDim2.new(1, 0, 1, -90)})
        TweenOut:Play()
        
        TweenOut.Completed:Connect(function()
            ScreenGui:Destroy()
        end)
    end)
end

-- Script loaded notification
CreateNotification("Mystic | Da Hood", "Script has been loaded successfully!", 5)

-- Return configuration for external access
return Config
